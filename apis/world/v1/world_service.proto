syntax = "proto3";
package v1;
option go_package = ".;v1";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

service WorldService {
  rpc WorldInfo(google.protobuf.Empty) returns (World) {}

  // Connect validates the connecting player and registers their UUID internally
  // if the server has enough capacity. Players will otherwise be disconnected via
  // errors to other RPC calls.
  rpc Connect(ConnectRequest) returns (ConnectResponse) {}

  rpc ListResourcesState(ListResourcesStateRequest) returns (ListResourcesStateResponse) {}

  rpc StartExpedition(StartExpeditionRequest) returns (StartExpeditionResponse) {}

  rpc CollectExpedition(CollectExpeditionRequest) returns (CollectExpeditionResponse) {}

  // ListExpeditions returns all expeditions based on the filter: all, player_owned, available
  // where:
  // - all are player_owned and available (default option when not set)
  // - player_owned are only expeditions that the player is currently on
  // - available are only expeditions currently available
  rpc ListExpeditions(ListExpeditionsRequest) returns (ListExpeditionsResponse) {}

  // Play encapsulates streaming messages for all actions that would otherwise
  // be unary, as well as provides ad-hoc messages of in-game updates
  rpc Play(stream ClientPlayMessage) returns (stream ServerPlayMessage) {}

  // Watch only streams gameplay broadcasts and is suitable for observing clients.
  // This method makes best effort to catch up connecting clients with the game objects,
  // however, clients are responsible for syncing objects via unary RPC in case of secondary
  // world objects such as leaderboard
  rpc Watch(google.protobuf.Empty) returns (stream ServerPlayMessage) {}
}

message ConnectRequest {
  string player_id = 1;
  string connect_type = 2; // "play" or "observe"
}

message ConnectResponse {
  bool approved = 1;
}

// ClientPlayMessage are messages sent by the clients to the server
message ClientPlayMessage {
  oneof req {
    ListResourcesStateRequest list_resources = 1;
    ListExpeditionsRequest list_expeditions = 2;
    StartExpeditionRequest start_expedition = 3;
    CollectExpeditionRequest collect_expedition = 4;
  }
}

// ServerPlayMessage are messages sent from the server to the clients
message ServerPlayMessage {
  oneof res {
    ListResourcesStateResponse list_resources = 1;
    ListExpeditionsResponse list_expeditions = 2;
    StartExpeditionResponse start_expedition = 3;
    CollectExpeditionResponse collect_expedition = 4;
  }
}

message World {
  string world_id = 1;
  string world_name = 2;

  int32 player_count = 10;
}

message Player {
  string player_id = 1;
  string player_name = 2;
}

enum ResourceCategory {
  RESOURCE_CATEGORY_UNSPECIFIED = 0;
  RESOURCE_CATEGORY_POWER = 1;
  RESOURCE_CATEGORY_MONEY = 2;
  RESOURCE_CATEGORY_IRON = 3;
  RESOURCE_CATEGORY_CLAY = 4;
  RESOURCE_CATEGORY_OIL = 5;
}

// Resource is used to specify costs of in-game entities, static spend, etc.
message Resource {
  ResourceCategory category = 1;
  int64 value = 2;
}

// ResourceState is a structure that encapsulates various types of resources and
// their value for a particular player, e.g. iron, clay, oil, bricks, money, etc.
message ResourceState {
  Resource resource = 1;

  // timestamp of the value. This is used to calculate how much resource was generated
  // in the meantime while the resource was not updated.
  google.protobuf.Timestamp timestamp = 3;
  // current known resource per minute. Frontends use this to automatically update the resources
  // from the last known timestamp.
  int64 rpm = 4;

  // TODO: add resource cap
}

message ListResourcesStateRequest {
  // id of the player to fetch resources for
  string player_id = 1;
  // ids to fetch. If empty, all resources will be returned
  repeated string ids = 2;
}

message ListResourcesStateResponse {
  repeated ResourceState resources = 1;
}

enum ExpeditionCategory {
  EXPEDITION_CATEGORY_UNSPECIFIED = 0;
  EXPEDITION_CATEGORY_QUICK_SEARCH = 1;
  EXPEDITION_CATEGORY_NEARBY_EXPLORATION = 2;
  EXPEDITION_CATEGORY_NEW_HORIZONS = 3;
}

enum ExpeditionStatus {
  EXPEDITION_STATUS_UNSPECIFIED = 0;
  EXPEDITION_STATUS_AVAILABLE = 1;
  EXPEDITION_STATUS_IN_PROGRESS = 2;
  EXPEDITION_STATUS_DONE = 3;

  EXPEDITION_STATUS_FAILED = 100;
}

message Expedition {
  string expedition_id = 1;
  ExpeditionCategory category = 2;
  string name = 3;
  // base duration of the expedition that can be modified within the state
  google.protobuf.Duration base_duration = 4;

  // The cost the player needs to pay for the expedition to start
  repeated Resource cost = 5;
}

message ExpeditionState {
  Expedition expedition = 1;
  ExpeditionStatus status = 2;

  // The time expedition started if it's currently EXPEDITION_STATUS_IN_PROGRESS
  google.protobuf.Timestamp started_at = 10;
  // The duration is well known but can be modified by the backend in case the player
  // uses a power-up to speed it up. The duration can be set for IN_PROGRESS and AVAILABLE
  // statuses. This is a total duration, not the remaining. The remaining duration is
  // calculated by subtracting this duration from the started_at field
  google.protobuf.Duration duration = 11;
}

enum ListExpeditionFilter {
  LIST_EXPEDITION_FILTER_ALL = 0;
  LIST_EXPEDITION_FILTER_PLAYER_ONLY = 1;
  LIST_EXPEDITION_FILTER_AVAILABLE_ONLY = 2;
}

message ListExpeditionsRequest {
  string player_id = 1;
  ListExpeditionFilter expedition_filter = 2;
  // filter only those expedition IDs that match this filter. This is an output-only
  // filter, any IDs that the player does not have access to will not be added to the result
  repeated string expedition_ids = 3;
}

message ListExpeditionsResponse {
  repeated Expedition available_expeditions = 1;
  repeated ExpeditionState expedition_states = 2;
}

message StartExpeditionRequest {
  string player_id = 1;
  string expedition_id = 2;
}

message StartExpeditionResponse {
}

message CollectExpeditionRequest {
  string player_id = 1;
  string expedition_id = 3;
}

message CollectExpeditionResponse {

}